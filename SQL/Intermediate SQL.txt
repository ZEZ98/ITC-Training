SELECT *
FROM tutorial.aapl_historical_stock_price

-- Count number of non-null rows in the "low" column
SELECT COUNT(low) AS low_count
FROM tutorial.aapl_historical_stock_price
--

-- Count of every column
SELECT  COUNT (date) AS date, 
        COUNT (year) AS year,
        COUNT (month) AS month,
        COUNT (open) AS open,
        COUNT (high) AS high,
        COUNT (low) AS low,
        COUNT (close) AS close,
        COUNT (volume) AS volume
FROM tutorial.aapl_historical_stock_price
--

SELECT SUM(volume)
  FROM tutorial.aapl_historical_stock_price
  
  
-- Average opening price
SELECT SUM(open) / COUNT(open) AS average_open
FROM tutorial.aapl_historical_stock_price
--

-- Apple's lowest stock price
SELECT MIN(low) 
FROM tutorial.aapl_historical_stock_price
--

-- Highest single day increase in share price
SELECT MAX(close - open) AS max_increase
FROM tutorial.aapl_historical_stock_price
--

-- Average daily trade volume
SELECT AVG(volume)
FROM tutorial.aapl_historical_stock_price
--

SELECT year,
       COUNT(*) AS count
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year

-- Total shares traded each month
SELECT year, month,
      SUM(volume)
FROM tutorial.aapl_historical_stock_price
GROUP BY year, month
ORDER BY year, month
--


SELECT year,
       month,
       COUNT(*) AS count
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year, month
 ORDER BY year, month
 
 
-- Average daily price change in apple stock grouped by year
SELECT year,
      AVG(close - open) AS average_price_change
FROM tutorial.aapl_historical_stock_price
GROUP BY year
ORDER BY year
--

-- Lowest and highest prices of apple stock each month
SELECT year, month,
    MIN(low),
    MAX(high)
FROM tutorial.aapl_historical_stock_price
GROUP BY year, month
ORDER BY year, month 
--

SELECT COUNT(DISTINCT month) AS unique_months
  FROM tutorial.aapl_historical_stock_price


SELECT month,
       AVG(volume) AS avg_trade_volume
  FROM tutorial.aapl_historical_stock_price
 GROUP BY month
 ORDER BY 2 DESC
 
-- Unique values for months in each year
SELECT year,
       COUNT(DISTINCT month) AS month_count
  FROM tutorial.aapl_historical_stock_price
 GROUP BY 1
 ORDER BY 1
--

-- Count unique values in month and year columns
SELECT COUNT(DISTINCT month) AS month_count,
       COUNT(DISTINCT year) AS year_count
FROM tutorial.aapl_historical_stock_price
--

SELECT teams.conference AS conference,
       AVG(players.weight) AS average_weight
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
 GROUP BY teams.conference
 ORDER BY AVG(players.weight) DESC
 
--Select school name, player name, position and weight for every player in Georgia
SELECT players.school_name,
      players.player_name,
      players.position,
      players.weight
FROM benn.college_football_players players
WHERE players.state = 'GA'
ORDER BY 4 DESC
--

SELECT *
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name

--Player names, School names and Conferances for FBS division
SELECT players.player_name,
        players.school_name,
        teams.conference 
FROM benn.college_football_players players
JOIN benn.college_football_teams teams
ON teams.school_name = players.school_name 
WHERE teams.division = 'FBS (Division I-A Teams)'
--


--Inner join and count number of rows
SELECT COUNT(companies.permalink) AS company_rows,
        COUNT(acquisitions.company_permalink) AS acquisition_rows
FROM tutorial.crunchbase_acquisitions acquisitions
JOIN tutorial.crunchbase_companies companies
ON companies.permalink = acquisitions.company_permalink
--


-- Left join of above query
SELECT COUNT(companies.permalink) AS company_rows,
        COUNT(acquisitions.company_permalink) AS acquisition_rows
FROM tutorial.crunchbase_companies companies
LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
ON companies.permalink = acquisitions.company_permalink
--

--No. of unique companies and unique acquired companies by state
SELECT companies.state_code,
      COUNT (DISTINCT companies.permalink) AS unique_companies,
      COUNT (DISTINCT acquisitions.company_permalink) AS unique_acquired_companies
FROM tutorial.crunchbase_companies companies
LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
ON companies.permalink = acquisitions.company_permalink
WHERE companies.state_code IS NOT NULL 
GROUP BY 1
ORDER BY 3 DESC
--

--Rewrite above query with a right join
SELECT companies.state_code,
      COUNT (DISTINCT companies.permalink) AS unique_companies,
      COUNT (DISTINCT acquisitions.company_permalink) AS unique_acquired_companies
FROM tutorial.crunchbase_acquisitions acquisitions 
RIGHT JOIN tutorial.crunchbase_companies companies 
ON companies.permalink = acquisitions.company_permalink
WHERE companies.state_code IS NOT NULL 
GROUP BY 1
ORDER BY 3 DESC
--

-- Company name, status and unique number of investors
SELECT companies.name AS company_name, companies.status,
       COUNT(DISTINCT investments.investor_name) AS unqiue_investors
FROM tutorial.crunchbase_companies companies
LEFT JOIN tutorial.crunchbase_investments investments
ON companies.permalink = investments.company_permalink
WHERE companies.state_code = 'NY'
GROUP BY 1,2
ORDER BY 3 DESC
--

--Investors and list of companies they invest in
SELECT CASE WHEN investments.investor_name IS NULL THEN 'No Investor'
       ELSE investments.investor_name END AS investor,
       COUNT(DISTINCT companies.permalink) AS companies_invested_in
FROM tutorial.crunchbase_companies companies
LEFT JOIN tutorial.crunchbase_investments investments
ON companies.permalink = investments.company_permalink
GROUP BY 1
ORDER BY 2 DESC
--

-- Full join and count matching and unmatching rows
SELECT COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NULL
       THEN companies.permalink ELSE NULL END) AS companies_only,
      COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NOT NULL
      THEN companies.permalink ELSE NULL END) AS both_tables,
      COUNT(CASE WHEN companies.permalink IS NULL AND investments.company_permalink IS NOT NULL
      THEN investments.company_permalink ELSE NULL END) AS investments_only
FROM tutorial.crunchbase_companies companies
FULL JOIN tutorial.crunchbase_investments_part1 investments
ON companies.permalink = investments.company_permalink
--

-- Appends the two crunch investment datasets and filter results companies starting with T and M
SELECT company_permalink,
       company_name,
       investor_name
FROM tutorial.crunchbase_investments_part1
WHERE company_name ILIKE 'T%'
 
UNION ALL

SELECT company_permalink,
       company_name,
       investor_name
FROM tutorial.crunchbase_investments_part2
WHERE company_name ILIKE 'M%'
--

-- Show which dataset, company status and count number of investors
SELECT 'investments_part1' AS dataset_name, companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
FROM tutorial.crunchbase_companies companies
LEFT JOIN tutorial.crunchbase_investments_part1 investments
ON companies.permalink = investments.company_permalink
GROUP BY 1,2

UNION ALL
 
SELECT 'investments_part2' AS dataset_name, companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
FROM tutorial.crunchbase_companies companies
LEFT JOIN tutorial.crunchbase_investments_part2 investments
ON companies.permalink = investments.company_permalink
GROUP BY 1,2
--
